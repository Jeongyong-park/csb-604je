{"version":3,"sources":["App.js","index.js"],"names":["INITIAL_VIEW_STATE","longitude","latitude","height","width","pitch","maxPitch","bearing","minZoom","maxZoom","zoom","App","props","_this","Object","classCallCheck","this","_super","call","state","viewState","tileset","cartographicCenter","_cartographicCenter","slicedToArray","objectSpread2","setState","transitionDuration","transitionInterpolator","FlyToInterpolator","Tile3DLayer","id","data","loader","I3SLoader","onTilesetLoad","_onTilesetLoad","bind","_this2","react_default","a","createElement","deckgl","layers","_renderLayers","controller","type","MapController","onViewStateChange","_ref","esm","mapStyle","mapboxApiAccessToken","preventStyleDiffing","Component","rootElement","document","getElementById","ReactDOM","render","StrictMode","App_App"],"mappings":"kWAYMA,EAAqB,CACzBC,WAAY,IACZC,SAAU,GACVC,OAAQ,IACRC,MAAO,IACPC,MAAO,GACPC,SAAU,GACVC,QAAS,EACTC,QAAS,EACTC,QAAS,GACTC,KAAM,MAGaC,oDACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,MAAQ,CAAEC,UAAWpB,GAFTa,oDAKnB,SAAeQ,GAEb,IAAQX,EAA6BW,EAA7BX,KAAMY,EAAuBD,EAAvBC,mBACdC,EAAAT,OAAAU,EAAA,EAAAV,CAA8BQ,EAA9B,GAAOrB,EAAPsB,EAAA,GAAkBrB,EAAlBqB,EAAA,GAEMH,EAASN,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAA,GACVE,KAAKG,MAAMC,WADD,IAEbV,KAAMA,EAAO,IACbT,YACAC,aAGFc,KAAKU,SAAS,CACZN,UAAUN,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAA,GACLM,GADI,IAIPO,mBAAoB,IACpBC,uBAAwB,IAAIC,qCAKlC,WAEE,MAAO,CACL,IAAIC,IAAY,CACdC,GAAI,gBAEJC,KACE,+GACFC,OAAQC,IACRC,cAAenB,KAAKoB,eAAeC,KAAKrB,+BAK9C,WAAS,IAAAsB,EAAAtB,KACCI,EAAcJ,KAAKG,MAAnBC,UAER,OACEmB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,OAAQ3B,KAAK4B,gBACbxB,UAAWA,EACXyB,WAAY,CAAEC,KAAMC,KACpBC,kBAAmB,SAAAC,GAAmB,IAAhB7B,EAAgB6B,EAAhB7B,UAEpBkB,EAAKZ,SAAS,CAAEN,gBAGlBmB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEC,SAAU,iCACVC,qBAzER,4FA0EQC,qBAAmB,YA3DIC,aCpB3BC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACPpB,EAAAC,EAAAC,cAACF,EAAAC,EAAMoB,WAAP,KACErB,EAAAC,EAAAC,cAACoB,EAAD,OAEFN","file":"static/js/main.b030b633.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport { MapController, FlyToInterpolator } from \"@deck.gl/core\";\nimport { Tile3DLayer } from \"@deck.gl/geo-layers\";\nimport { I3SLoader } from \"@loaders.gl/i3s\";\n\n// How to get mapbox token https://docs.mapbox.com/help/how-mapbox-works/access-tokens/\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1Ijoia2xhZGVzcyIsImEiOiJja3liZWh3NGEwZWxkMm9wODQ0cWJxODQ2In0.Pjw1Vd6qwFZ2iPtz3CiPdg\"; // add your mapbox token here\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -120,\n  latitude: 34,\n  height: 600,\n  width: 800,\n  pitch: 45,\n  maxPitch: 85,\n  bearing: 0,\n  minZoom: 2,\n  maxZoom: 30,\n  zoom: 14.5\n};\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { viewState: INITIAL_VIEW_STATE };\n  }\n\n  _onTilesetLoad(tileset) {\n    // update viewport when tileset loaded\n    const { zoom, cartographicCenter } = tileset;\n    const [longitude, latitude] = cartographicCenter;\n\n    const viewState = {\n      ...this.state.viewState,\n      zoom: zoom + 2.5,\n      longitude,\n      latitude\n    };\n\n    this.setState({\n      viewState: {\n        ...viewState,\n        // transition to view\n        // https://github.com/uber/deck.gl/blob/master/docs/api-reference/view-state-transitions.md\n        transitionDuration: 4000,\n        transitionInterpolator: new FlyToInterpolator()\n      }\n    });\n  }\n\n  _renderLayers() {\n    // construct Tile3DLayer to render I3S tileset\n    return [\n      new Tile3DLayer({\n        id: \"tile-3d-layer\",\n        // Tileset entry point: Indexed 3D layer file url\n        data:\n          \"https://tiles.arcgis.com/tiles/z2tnIkrLQ2BRzr6P/arcgis/rest/services/SanFrancisco_Bldgs/SceneServer/layers/0\",\n        loader: I3SLoader,\n        onTilesetLoad: this._onTilesetLoad.bind(this)\n      })\n    ];\n  }\n\n  render() {\n    const { viewState } = this.state;\n\n    return (\n      <DeckGL\n        layers={this._renderLayers()}\n        viewState={viewState}\n        controller={{ type: MapController }}\n        onViewStateChange={({ viewState }) => {\n          // update viewState when interacting with map\n          this.setState({ viewState });\n        }}\n      >\n        <StaticMap\n          mapStyle={\"mapbox://styles/mapbox/dark-v9\"}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n          preventStyleDiffing\n        />\n      </DeckGL>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}